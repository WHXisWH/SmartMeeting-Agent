apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: smartmeet-agent-brain
  annotations:
    # Cloud Run configuration
    run.googleapis.com/ingress: all
    run.googleapis.com/execution-environment: gen2
    run.googleapis.com/cpu-throttling: "false"
    # Custom domain
    run.googleapis.com/custom-audiences: "smartmeet-agent"
spec:
  template:
    metadata:
      annotations:
        # Scaling configuration
        autoscaling.knative.dev/minScale: "1"
        autoscaling.knative.dev/maxScale: "10"
        # Resource configuration
        run.googleapis.com/cpu: "2"
        run.googleapis.com/memory: "4Gi"
        run.googleapis.com/timeout: "3600s"
        # Network configuration
        run.googleapis.com/vpc-access-connector: "smartmeet-connector"
        run.googleapis.com/vpc-access-egress: "all-traffic"
    spec:
      # Service Account configuration
      serviceAccountName: smartmeet-agent@PROJECT_ID.iam.gserviceaccount.com
      
      containers:
      - image: gcr.io/PROJECT_ID/smartmeet-agent-brain:latest
        ports:
        - name: http1
          containerPort: 8080
        
        # Environment variables
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "8080"
        - name: GOOGLE_CLOUD_PROJECT_ID
          value: "PROJECT_ID"
        - name: AGENT_MODE
          value: "CLOUD_RUN"
        - name: VERTEX_AI_LOCATION
          value: "asia-northeast1"
        - name: LOG_LEVEL
          value: "info"
        
        # Get sensitive information from Secret Manager
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: jwt-secret
              key: latest
        - name: WEBHOOK_TOKEN
          valueFrom:
            secretKeyRef:
              name: webhook-token
              key: latest
        - name: GOOGLE_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: google-client-secret
              key: latest
        
        # Resource limits
        resources:
          limits:
            cpu: "2000m"
            memory: "4Gi"
          requests:
            cpu: "1000m"
            memory: "2Gi"
        
        # Health check
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Startup probe
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30

  traffic:
  - percent: 100
    latestRevision: true